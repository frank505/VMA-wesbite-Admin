{"version":3,"sources":["helpers/hooksFormInput.js","helpers/componentHelperFunc.js","store/Actions/AdminProfileActions.js","services/AdminProfileService.js","views/viewadmins/components/AdminLists.js","views/viewadmins/ViewAdmin.js"],"names":["useFormFields","initialState","useState","fields","setValues","event","target","id","value","disableSubmitButton","dataObject","setDisable","objects","test","cleanUpData","abortController","abort","instantiateAbort","AbortController","signal","SwalAlert","title","text","icon","swal","button","RegisterNewAdminAction","credentials","dispatch","type","RESTART_REGISTRATION_RESPONSE","REGISTRATION_LOADING","HttpService","postData","then","data","console","log","JSON","stringify","catch","error","RegisterService","res","hasOwnProperty","success","REGISTRATION_SUCCESS","REGISTRATION_ERROR","REGISTRATION_CODE_ERROR","clearNewAdminRegistrationState","ViewAdminListAction","perPage","pageIndex","RESTART_ADMINLIST_RESPONSE","ADMINLIST_LOADING","addedUrl","getData","AdminListService","ADMINLIST_SUCCESS","ADMINLIST_ERROR","ADMINLIST_CODE_ERROR","ChangePasswordAction","RESTART_CHANGE_PASSWORD_RESPONSE","CHANGE_PASSWORD_LOADING","ChangePasswordService","CHANGE_PASSWORD_SUCCESS","CHANGE_PASSWORD_ERROR","CHANGE_PASSWORD_CODE_ERROR","clearChangePasswordState","AdminLists","useDispatch","adminList","useSelector","state","adminProfile","adminListResponse","abortEffect","useEffect","currentPage","setCurrentPage","color","height","width","className","map","user","key","name","email","mobile_no","created_at","style","marginLeft","size","activePage","pages","total","onActivePageChange","nextOrPrevPageClicked","last_page","ViewAdmin","md"],"mappings":"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","file":"static/js/19.900b48c3.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport const  useFormFields = (initialState) => {\n  const [fields, setValues] = useState(initialState);\n\n  return [\n    fields,\n    setValues,\n    function(event) {\n      setValues({\n        ...fields,\n        [event.target.id]: event.target.value\n      });\n    }\n  ];\n}\n\n\n\nexport const disableSubmitButton = (dataObject,setDisable)=>\n   {\n    for(var objects in dataObject)\n    {\n      /**\n       * if  an empty field exist then disable submit button\n       */\n     if(dataObject[objects]==\"\" || dataObject[objects]==null)\n     {\n       \n        return  setDisable(true);\n     }\n     /**\n       * if  an invalid email exists in the form then disable submit button\n       */\n     if(objects==\"email\")\n     {\n         if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(dataObject[objects]))\n         {\n          return  setDisable(true);\n         }\n     }\n\n    }\n   /**\n    * all forms fields have been submited then we return false and set disable property to true\n    */\n     return setDisable(false);\n   }","\nimport swal from 'sweetalert';\n\n\nexport const cleanUpData = (abortController) =>\n{\n    abortController.abort();\n}\n\nexport const instantiateAbort = () =>\n{\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    return abortController;\n}\n\nexport const redirectIfTokenExist = (tokenIdentifier,props) =>\n{\n    let token = localStorage.getItem(tokenIdentifier);\n    if(token !=\"\" && token != null)\n    {\n      props.history.push(\"/user\");\n    }\n}\n\n\nexport const redirectIfTokenExpired = (tokenIdentifier,history) =>\n{\n localStorage.removeItem(tokenIdentifier);\n  history.push(\"/login\");\n}\n\n\n // a little function to help us with reordering the result\n export const reOrder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n \n  console.log(result);\n\n return result;\n\n   };\n\n\nexport const getBase64 =  (file,callback)=> \n{\n   \n  try{\n    const reader = new FileReader();\n\n    reader.addEventListener('load',\n     () => callback(reader.result)\n     );\n\n    reader.readAsDataURL(file);\n  }catch(ex)\n  {\n   console.log(ex)\n  }\n   \n}\n\nexport const SwalAlert = (title,text,icon) =>\n{\nreturn  swal({\n  title: title,\n  text: text,\n  icon: icon,\n  button: true\n})\n\n}\n\n\nexport const tokenExist = (tokenIdentifier) =>\n{\n  let token = localStorage.getItem(tokenIdentifier);\n  if(token == \"\" || token==null)\n  {\n    return false;\n  }\n  return true;\n}\n\n\nexport const convertUrlToBase64String = (imgUrl) =>\n{\n  return new Promise(\n    function(resolve, reject) {\n\n      var img = new Image();\n      img.setAttribute('crossOrigin', 'anonymous');\n      img.src = imgUrl;\n     \n\n      img.onload = function() {\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = img.width;\n        canvas.height = img.height;\n        var ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        var dataURL = canvas.toDataURL();\n        resolve(dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\"));\n      }\n      img.onerror = function() {\n        reject(\"The image could not be loaded.\");\n      }\n\n    });\n}","import { \n    RESTART_REGISTRATION_RESPONSE,\n     REGISTRATION_LOADING, \n     REGISTRATION_SUCCESS,\n     REGISTRATION_ERROR,\n     REGISTRATION_CODE_ERROR,\n     RESTART_ADMINLIST_RESPONSE,\n     ADMINLIST_LOADING,\n     ADMINLIST_SUCCESS,\n     ADMINLIST_ERROR,\n     ADMINLIST_CODE_ERROR,\n     RESTART_CHANGE_PASSWORD_RESPONSE,\n     CHANGE_PASSWORD_LOADING,\n     CHANGE_PASSWORD_SUCCESS,\n     CHANGE_PASSWORD_ERROR,\n     CHANGE_PASSWORD_CODE_ERROR\n    } from \"../ActionTypes/AdminProfileTypes\";\nimport { \n    RegisterService,\n     AdminListService, \n     ChangePasswordService\n    } from \"../../services/AdminProfileService\";\n\n\n\n \nexport const RegisterNewAdminAction = (credentials) =>\n{\n   return (dispatch)=>{\n \n       dispatch({type:RESTART_REGISTRATION_RESPONSE});\n       dispatch({type:REGISTRATION_LOADING});\n\n    RegisterService(credentials).then((res)=>{\n\n               console.log(res);\n\n               if(res.hasOwnProperty('success') && res.success==true){\n                dispatch({type:REGISTRATION_SUCCESS,res});\n              \n\n               }else if(res.hasOwnProperty('success') && res.success==false) {\n                    dispatch({type:REGISTRATION_ERROR,res});  \n               }\n           },\n           error=>{\n            dispatch({type:REGISTRATION_CODE_ERROR,error});\n               console.log(error);\n           }\n       )\n   } \n\n}\n\nexport const clearNewAdminRegistrationState = ()=>\n{\n   return (dispatch)=>\n   {\n       dispatch({type:RESTART_REGISTRATION_RESPONSE});\n   }\n}\n\n\nexport const ViewAdminListAction = (perPage,pageIndex) =>\n{\n   return (dispatch)=>{\n \n       dispatch({type:RESTART_ADMINLIST_RESPONSE});\n       dispatch({type:ADMINLIST_LOADING});\n\n    AdminListService(perPage,pageIndex).then((res)=>{\n\n               console.log(res);\n\n               if(res.hasOwnProperty('success') && res.success==true){\n                dispatch({type:ADMINLIST_SUCCESS,res});\n              \n\n               }else if(res.hasOwnProperty('success') && res.success==false) {\n                    dispatch({type:ADMINLIST_ERROR,res});  \n               }\n           },\n           error=>{\n            dispatch({type:ADMINLIST_CODE_ERROR,error});\n               console.log(error);\n           }\n       )\n   } \n\n}\n\nexport const clearNewAdminListState= ()=>\n{\n   return (dispatch)=>\n   {\n       dispatch({type:RESTART_ADMINLIST_RESPONSE});\n   }\n}\n\nexport const ChangePasswordAction = (credentials) =>\n{\n   return (dispatch)=>{\n \n       dispatch({type:RESTART_CHANGE_PASSWORD_RESPONSE});\n       dispatch({type:CHANGE_PASSWORD_LOADING});\n\n   ChangePasswordService(credentials).then((res)=>{\n\n               console.log(res);\n\n               if(res.hasOwnProperty('success') && res.success==true){\n                dispatch({type:CHANGE_PASSWORD_SUCCESS,res});\n              \n\n               }else if(res.hasOwnProperty('success') && res.success==false) {\n                    dispatch({type:CHANGE_PASSWORD_ERROR,res});  \n               }\n           },\n           error=>{\n            dispatch({type:CHANGE_PASSWORD_CODE_ERROR,error});\n               console.log(error);\n           }\n       )\n   } \n\n}\n\n \nexport const clearChangePasswordState = ()=>\n{\n   return (dispatch)=>\n   {\n       dispatch({type:RESTART_CHANGE_PASSWORD_RESPONSE});\n   }\n}","import HttpService from './HttpService';\nimport Cookies from 'js-cookie'\n\n\n\nexport const RegisterService = (credentials) =>{\n    const http = new HttpService();\n    let addedUrl = \"admin/register\";\n    let tokenId = 'vt-music';\n    return http.postData(credentials,addedUrl,\"POST\",tokenId).then(data=>{\n        console.log(data);\n        console.log(JSON.stringify(data));\n        return data;\n    }).catch((error)=> {console.log(error)\n        return error; \n         });\n}\n\nexport const AdminListService = (perPage,pageIndex) =>{\n    const http = new HttpService();\n    let addedUrl = \"admin/admin-list/\"+perPage+\"?page=\"+pageIndex;\n    let tokenId = 'vt-music';\n    return http.getData(addedUrl,tokenId).then((data)=>\n    {\n        console.log(data)\n        return data;\n\n    }).catch((error)=>\n    {\n        console.log(error)\n        return error;\n    });\n}\n\n\nexport const ChangePasswordService = (credentials) =>\n{\n\n    const http = new HttpService();\n    let addedUrl = \"admin/change-password\";\n    let tokenId = 'vt-music';\n    return http.postData(credentials,addedUrl,\"PATCH\",tokenId).then(data=>{\n        console.log(data);\n        console.log(JSON.stringify(data));\n        return data;\n    }).catch((error)=> {console.log(error)\n        return error; \n         });\n }\n\n","import React,{useState,useEffect} from 'react';\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CTooltip,\n  CRow,\n  CButton,\n  CPagination\n} from '@coreui/react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {\n  useDispatch,\n   useSelector\n  } from 'react-redux'\n    \n \n\n  import {\n    useFormFields,\n    disableSubmitButton\n }  from '../../../helpers/hooksFormInput'\n import {\n     cleanUpData,\n     instantiateAbort\n    } from '../../../helpers/componentHelperFunc'\n\n    import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\n    import Loader from 'react-loader-spinner'\n\nimport usersData from '../../users/UsersData'\nimport { ViewAdminListAction } from '../../../store/Actions/AdminProfileActions';\n\nconst getBadge = status => {\n  switch (status) {\n    case 'Active': return 'success'\n    case 'Inactive': return 'secondary'\n    case 'Pending': return 'warning'\n    case 'Banned': return 'danger'\n    default: return 'primary'\n  }\n}\nconst fields = ['name','email','mobile_no','created_at']\n\n\n\n\nexport default function AdminLists()  \n{\n    \n  const dispatch =  useDispatch();\n     \n  const adminList = useSelector(state => state.adminProfile.adminListResponse);\n\n  const abortEffect = instantiateAbort();\n\n  const perPage = 5;\n  \n    useEffect(() => {\n      \n     dispatch(ViewAdminListAction(perPage,1));\n      return () => {\n        cleanUpData(abortEffect);\n      }\n    }, [])\n\n  const [currentPage, setCurrentPage] = useState(1)\n\n  const loadPageItem = (nextOrPrevPageClicked) =>\n  {\n    dispatch(ViewAdminListAction(perPage,nextOrPrevPageClicked))\n  setCurrentPage(nextOrPrevPageClicked);\n  } \n\n  return (\n    <>\n    <CRow>\n        <CCol>\n          <CCard>\n            <CCardHeader>\n              Admin Lists\n            </CCardHeader>\n            <CCardBody>\n               \n               {\n                  adminList == 'loading' || adminList == '' ?\n\n                  <Loader type=\"ThreeDots\" color=\"#321fdb\" height={100} width={100} />\n                  :\n                  adminList.hasOwnProperty('data') && adminList.success == true ?\n                    <>\n<table className=\"table table-bordered table-striped\">\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Email</th>\n        <th>Mobile no</th>\n        <th>Date Account Was Created</th>\n      </tr>\n    </thead>\n    <tbody>\n      {\n        adminList.data.data.map((user)=>(\n  \n          <tr key={user.id}>\n   \n          <td>{user.name}</td>\n      <td>{user.email}</td>\n        <td>{user.mobile_no}</td>\n        <td>{user.created_at}</td>\n    </tr>\n\n        ))\n      }\n     \n      \n    </tbody>\n  </table>\n\n<div style={{marginLeft:10}}>\n            <CPagination\n            size=\"sm\"\n            activePage={currentPage}\n            pages={adminList.data.total}\n            onActivePageChange={loadPageItem}\n            pages={adminList.data.last_page}\n          />\n                 \n            \n            </div>\n            </>\n            :\n\n            \"\"\n            \n           }\n\n\n            </CCardBody>\n            \n           \n\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  );\n}\n  ","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CRow\n} from '@coreui/react'\nimport AdminLists from './components/AdminLists'\n\nconst ViewAdmin = () => {\n  return (\n    <div className=\" c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"12\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                    \n                    <AdminLists/>\n\n                </CCardBody>\n              </CCard>\n            \n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default ViewAdmin\n"],"sourceRoot":""}
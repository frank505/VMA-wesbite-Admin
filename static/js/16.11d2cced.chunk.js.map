{"version":3,"sources":["helpers/hooksFormInput.js","helpers/componentHelperFunc.js","store/Actions/AdminProfileActions.js","services/AdminProfileService.js","views/registeradmin/components/RegistrationForm.js","views/registeradmin/RegisterAdmin.js"],"names":["useFormFields","initialState","useState","fields","setValues","event","target","id","value","disableSubmitButton","dataObject","setDisable","objects","test","cleanUpData","abortController","abort","instantiateAbort","AbortController","signal","SwalAlert","title","text","icon","swal","button","RegisterNewAdminAction","credentials","dispatch","type","RESTART_REGISTRATION_RESPONSE","REGISTRATION_LOADING","HttpService","postData","then","data","console","log","JSON","stringify","catch","error","RegisterService","res","hasOwnProperty","success","REGISTRATION_SUCCESS","REGISTRATION_ERROR","REGISTRATION_CODE_ERROR","clearNewAdminRegistrationState","ViewAdminListAction","perPage","pageIndex","RESTART_ADMINLIST_RESPONSE","ADMINLIST_LOADING","addedUrl","getData","AdminListService","ADMINLIST_SUCCESS","ADMINLIST_ERROR","ADMINLIST_CODE_ERROR","ChangePasswordAction","RESTART_CHANGE_PASSWORD_RESPONSE","CHANGE_PASSWORD_LOADING","ChangePasswordService","CHANGE_PASSWORD_SUCCESS","CHANGE_PASSWORD_ERROR","CHANGE_PASSWORD_CODE_ERROR","clearChangePasswordState","RegistrationForm","email","password","name","mobile_no","handleFieldChange","disable","useDispatch","authResponse","useSelector","state","adminProfile","adminRegistrationResponse","abortEffect","useHistory","useEffect","disableButtonIfFieldsAreEmpty","AdminRegister","e","preventDefault","closeBtnAction","initialValues","validate","errors","message","touched","handleBlur","onSubmit","color","height","width","closeButton","onClick","Object","keys","map","index","key","displayErrorMessages","className","onChange","onBlur","placeholder","autoComplete","xs","disabled","RegisterAdmin","md"],"mappings":"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","file":"static/js/16.11d2cced.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport const  useFormFields = (initialState) => {\n  const [fields, setValues] = useState(initialState);\n\n  return [\n    fields,\n    setValues,\n    function(event) {\n      setValues({\n        ...fields,\n        [event.target.id]: event.target.value\n      });\n    }\n  ];\n}\n\n\n\nexport const disableSubmitButton = (dataObject,setDisable)=>\n   {\n    for(var objects in dataObject)\n    {\n      /**\n       * if  an empty field exist then disable submit button\n       */\n     if(dataObject[objects]==\"\" || dataObject[objects]==null)\n     {\n       \n        return  setDisable(true);\n     }\n     /**\n       * if  an invalid email exists in the form then disable submit button\n       */\n     if(objects==\"email\")\n     {\n         if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(dataObject[objects]))\n         {\n          return  setDisable(true);\n         }\n     }\n\n    }\n   /**\n    * all forms fields have been submited then we return false and set disable property to true\n    */\n     return setDisable(false);\n   }","\nimport swal from 'sweetalert';\n\n\nexport const cleanUpData = (abortController) =>\n{\n    abortController.abort();\n}\n\nexport const instantiateAbort = () =>\n{\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    return abortController;\n}\n\nexport const redirectIfTokenExist = (tokenIdentifier,props) =>\n{\n    let token = localStorage.getItem(tokenIdentifier);\n    if(token !=\"\" && token != null)\n    {\n      props.history.push(\"/user\");\n    }\n}\n\n\nexport const redirectIfTokenExpired = (tokenIdentifier,history) =>\n{\n localStorage.removeItem(tokenIdentifier);\n  history.push(\"/login\");\n}\n\n\n // a little function to help us with reordering the result\n export const reOrder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n \n  console.log(result);\n\n return result;\n\n   };\n\n\nexport const getBase64 =  (file,callback)=> \n{\n   \n  try{\n    const reader = new FileReader();\n\n    reader.addEventListener('load',\n     () => callback(reader.result)\n     );\n\n    reader.readAsDataURL(file);\n  }catch(ex)\n  {\n   console.log(ex)\n  }\n   \n}\n\nexport const SwalAlert = (title,text,icon) =>\n{\nreturn  swal({\n  title: title,\n  text: text,\n  icon: icon,\n  button: true\n})\n\n}\n\n\nexport const tokenExist = (tokenIdentifier) =>\n{\n  let token = localStorage.getItem(tokenIdentifier);\n  if(token == \"\" || token==null)\n  {\n    return false;\n  }\n  return true;\n}\n\n\nexport const convertUrlToBase64String = (imgUrl) =>\n{\n  return new Promise(\n    function(resolve, reject) {\n\n      var img = new Image();\n      img.setAttribute('crossOrigin', 'anonymous');\n      img.src = imgUrl;\n     \n\n      img.onload = function() {\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = img.width;\n        canvas.height = img.height;\n        var ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        var dataURL = canvas.toDataURL();\n        resolve(dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\"));\n      }\n      img.onerror = function() {\n        reject(\"The image could not be loaded.\");\n      }\n\n    });\n}","import { \n    RESTART_REGISTRATION_RESPONSE,\n     REGISTRATION_LOADING, \n     REGISTRATION_SUCCESS,\n     REGISTRATION_ERROR,\n     REGISTRATION_CODE_ERROR,\n     RESTART_ADMINLIST_RESPONSE,\n     ADMINLIST_LOADING,\n     ADMINLIST_SUCCESS,\n     ADMINLIST_ERROR,\n     ADMINLIST_CODE_ERROR,\n     RESTART_CHANGE_PASSWORD_RESPONSE,\n     CHANGE_PASSWORD_LOADING,\n     CHANGE_PASSWORD_SUCCESS,\n     CHANGE_PASSWORD_ERROR,\n     CHANGE_PASSWORD_CODE_ERROR\n    } from \"../ActionTypes/AdminProfileTypes\";\nimport { \n    RegisterService,\n     AdminListService, \n     ChangePasswordService\n    } from \"../../services/AdminProfileService\";\n\n\n\n \nexport const RegisterNewAdminAction = (credentials) =>\n{\n   return (dispatch)=>{\n \n       dispatch({type:RESTART_REGISTRATION_RESPONSE});\n       dispatch({type:REGISTRATION_LOADING});\n\n    RegisterService(credentials).then((res)=>{\n\n               console.log(res);\n\n               if(res.hasOwnProperty('success') && res.success==true){\n                dispatch({type:REGISTRATION_SUCCESS,res});\n              \n\n               }else if(res.hasOwnProperty('success') && res.success==false) {\n                    dispatch({type:REGISTRATION_ERROR,res});  \n               }\n           },\n           error=>{\n            dispatch({type:REGISTRATION_CODE_ERROR,error});\n               console.log(error);\n           }\n       )\n   } \n\n}\n\nexport const clearNewAdminRegistrationState = ()=>\n{\n   return (dispatch)=>\n   {\n       dispatch({type:RESTART_REGISTRATION_RESPONSE});\n   }\n}\n\n\nexport const ViewAdminListAction = (perPage,pageIndex) =>\n{\n   return (dispatch)=>{\n \n       dispatch({type:RESTART_ADMINLIST_RESPONSE});\n       dispatch({type:ADMINLIST_LOADING});\n\n    AdminListService(perPage,pageIndex).then((res)=>{\n\n               console.log(res);\n\n               if(res.hasOwnProperty('success') && res.success==true){\n                dispatch({type:ADMINLIST_SUCCESS,res});\n              \n\n               }else if(res.hasOwnProperty('success') && res.success==false) {\n                    dispatch({type:ADMINLIST_ERROR,res});  \n               }\n           },\n           error=>{\n            dispatch({type:ADMINLIST_CODE_ERROR,error});\n               console.log(error);\n           }\n       )\n   } \n\n}\n\nexport const clearNewAdminListState= ()=>\n{\n   return (dispatch)=>\n   {\n       dispatch({type:RESTART_ADMINLIST_RESPONSE});\n   }\n}\n\nexport const ChangePasswordAction = (credentials) =>\n{\n   return (dispatch)=>{\n \n       dispatch({type:RESTART_CHANGE_PASSWORD_RESPONSE});\n       dispatch({type:CHANGE_PASSWORD_LOADING});\n\n   ChangePasswordService(credentials).then((res)=>{\n\n               console.log(res);\n\n               if(res.hasOwnProperty('success') && res.success==true){\n                dispatch({type:CHANGE_PASSWORD_SUCCESS,res});\n              \n\n               }else if(res.hasOwnProperty('success') && res.success==false) {\n                    dispatch({type:CHANGE_PASSWORD_ERROR,res});  \n               }\n           },\n           error=>{\n            dispatch({type:CHANGE_PASSWORD_CODE_ERROR,error});\n               console.log(error);\n           }\n       )\n   } \n\n}\n\n \nexport const clearChangePasswordState = ()=>\n{\n   return (dispatch)=>\n   {\n       dispatch({type:RESTART_CHANGE_PASSWORD_RESPONSE});\n   }\n}","import HttpService from './HttpService';\nimport Cookies from 'js-cookie'\n\n\n\nexport const RegisterService = (credentials) =>{\n    const http = new HttpService();\n    let addedUrl = \"admin/register\";\n    let tokenId = 'vt-music';\n    return http.postData(credentials,addedUrl,\"POST\",tokenId).then(data=>{\n        console.log(data);\n        console.log(JSON.stringify(data));\n        return data;\n    }).catch((error)=> {console.log(error)\n        return error; \n         });\n}\n\nexport const AdminListService = (perPage,pageIndex) =>{\n    const http = new HttpService();\n    let addedUrl = \"admin/admin-list/\"+perPage+\"?page=\"+pageIndex;\n    let tokenId = 'vt-music';\n    return http.getData(addedUrl,tokenId).then((data)=>\n    {\n        console.log(data)\n        return data;\n\n    }).catch((error)=>\n    {\n        console.log(error)\n        return error;\n    });\n}\n\n\nexport const ChangePasswordService = (credentials) =>\n{\n\n    const http = new HttpService();\n    let addedUrl = \"admin/change-password\";\n    let tokenId = 'vt-music';\n    return http.postData(credentials,addedUrl,\"PATCH\",tokenId).then(data=>{\n        console.log(data);\n        console.log(JSON.stringify(data));\n        return data;\n    }).catch((error)=> {console.log(error)\n        return error; \n         });\n }\n\n","import React,{useState,useEffect} from 'react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n  CAlert,\n \n} from '@coreui/react'\nimport { Formik } from 'formik';\nimport {\n    useFormFields,\n    disableSubmitButton\n }  from '../../../helpers/hooksFormInput'\n import {\n     cleanUpData,\n     instantiateAbort\n    } from '../../../helpers/componentHelperFunc'\n\n    import {\n        useDispatch,\n         useSelector\n        } from 'react-redux';\n        \n    import '../styles.css'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner'\nimport { useHistory } from 'react-router-dom';\nimport { RegisterNewAdminAction, \n  clearNewAdminRegistrationState \n} from '../../../store/Actions/AdminProfileActions';\n\nexport default function RegistrationForm() {\n\n   \n    const [fields,setValues,handleFieldChange] = useFormFields({\n        email: \"\",\n        password: \"\",\n        name:\"\",\n        mobile_no:\"\"\n      });  \n\n      const [disable, setDisable] = useState(true);\n     \n      const dispatch =  useDispatch();\n     \n      const authResponse = useSelector(state => state.adminProfile.adminRegistrationResponse);\n\n      const abortEffect = instantiateAbort();\n\n      const history = useHistory();\n\nconst validation = () =>\n{\n const errors = {};\n  \nerrors.email =  !fields.email? 'Email Field is Required': '';\nerrors.email = !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(fields.email)?'Invalid email address':'';\nerrors.password =  !fields.password? 'Password Field is Required': '';\nerrors.mobile_no = !fields.mobile_no? 'Mobile number Field is Required':'';\nerrors.name = !fields.name?'Username field is Required':'';\n\n return errors;\n}\n\n\n /**\n   * ensure button remains disable until all form fields are filled\n   */\n  useEffect(() => \n  {\n    disableButtonIfFieldsAreEmpty(fields);\n\n    return function cleanup()\n      {\n        cleanUpData(abortEffect);\n      }\n\n   }, [fields]); \n\nconst AdminRegister = (e) =>\n{\n  e.preventDefault();\n  dispatch(RegisterNewAdminAction(fields));\n}  \n\n\nconst disableButtonIfFieldsAreEmpty = (dataObject)=>\n{\n disableSubmitButton(dataObject,setDisable);\n}\n\n\nconst successMessage = (message) =>\n{\n    console.log(message);\n    return(\n      <CAlert\n      color=\"success\"\n      closeButton\n      onClick={closeBtnAction}\n    >\n     {message}\n    </CAlert>\n  );\n  \n}\n\n \nconst displayErrorMessages = (error,message)=>\n{\n    \n    if(typeof error === \"undefined\")\n    {\n        return(\n            <CAlert\n            color=\"danger\"\n            closeButton\n            onClick={closeBtnAction}\n          >\n           {message}\n          </CAlert>\n        );\n    }\n    \n   return  Object.keys(error).map((keys,index)=>{\n      \n        return(\n            <CAlert\n            color=\"danger\"\n            closeButton\n            onClick={closeBtnAction}\n            key={keys}\n          >\n          {error[keys][0]}\n          </CAlert>\n        );\n     \n      });\n\n}\n\n \n\n\n  const closeBtnAction = () =>\n  {\n      dispatch(clearNewAdminRegistrationState());\n  }\n\n\n\n\n\n    return (\n        <Formik\n      initialValues={fields}\n      validate={validation}\n    >\n      {({\n        errors,\n        touched,\n        handleBlur,\n        /* and other goodies */\n      }) => (\n\n        <CForm  onSubmit={AdminRegister}>\n\n       \n    {\n      /**\n       * if the value of the state is loading\n       */\n      authResponse!=\"\" && authResponse == \"loading\"?\n      <>\n\t<Loader type=\"ThreeDots\" color=\"#321fdb\" height={60} width={60} />\n      </>\n      : \n      /**\n       * if authResponse.success is true show success message\n       */\n    authResponse!=\"\" && authResponse.success==true? \n    successMessage(authResponse.message)\n    /**\n     * else if authResponse.success == false show error messages\n     */\n       : \n      authResponse.success==false ?\n      displayErrorMessages(authResponse.error,authResponse.message) \n      : authResponse\n\n    }\n\n        <h3>Register</h3>\n        <p className=\"text-muted\">Register new admin</p>\n\n        <CInputGroup className=\"mb-3\">\n          <CInputGroupPrepend>\n            <CInputGroupText>\n              <CIcon name=\"cil-user\" />\n            </CInputGroupText>\n          </CInputGroupPrepend>\n          <CInput type=\"text\"\n           id=\"name\"\n           name=\"name\"\n           value = {fields.name}\n           onChange={handleFieldChange}\n           onBlur={handleBlur}\n          placeholder=\"Username\" autoComplete=\"username\" />\n         \n         <div className=\"error_form_response\">\n          {\n            errors.name && touched.name && errors.name\n          }\n        </div>\n       \n        </CInputGroup>\n\n        <CInputGroup className=\"mb-3\">\n          <CInputGroupPrepend>\n            <CInputGroupText>\n              <CIcon name=\"cil-user\" />\n            </CInputGroupText>\n          </CInputGroupPrepend>\n          <CInput type=\"email\"\n           id=\"email\"\n           name=\"email\"\n           value = {fields.email}\n           onChange={handleFieldChange}\n           onBlur={handleBlur}\n          placeholder=\"Email\" autoComplete=\"email\" />\n         \n         <div className=\"error_form_response\">\n          {\n            errors.email && touched.email && errors.email\n          }\n        </div>\n       \n        </CInputGroup>\n\n        <CInputGroup className=\"mb-3\">\n          <CInputGroupPrepend>\n            <CInputGroupText>\n              <CIcon name=\"cil-user\" />\n            </CInputGroupText>\n          </CInputGroupPrepend>\n          <CInput type=\"number\"\n           id=\"mobile_no\"\n           name=\"mobile_no\"\n           value = {fields.mobile_no}\n           onChange={handleFieldChange}\n           onBlur={handleBlur}\n          placeholder=\"Mobile Number\" autoComplete=\"mobile Number\" />\n         \n         <div className=\"error_form_response\">\n          {\n            errors.mobile_no && touched.mobile_no && errors.mobile_no\n          }\n        </div>\n       \n        </CInputGroup>\n\n        <CInputGroup className=\"mb-4\">\n          <CInputGroupPrepend>\n            <CInputGroupText>\n              <CIcon name=\"cil-lock-locked\" />\n            </CInputGroupText>\n          </CInputGroupPrepend>\n          <CInput type=\"password\"\n           id=\"password\"\n           value = {fields.password}\n           onChange={handleFieldChange}\n           onBlur={handleBlur}\n          placeholder=\"Password\" autoComplete=\"current-password\" />\n\n<div className=\"error_form_response\">\n          {\n            errors.password && touched.password && errors.password\n          }\n        </div>\n\n        </CInputGroup>\n       \n        \n\n        <CRow>\n          <CCol xs=\"6\">\n            <CButton color=\"primary\" \n             disabled={disable}\n            type=\"submit\" className=\"px-4\">Register Admin</CButton>\n          </CCol>\n          \n        </CRow>\n\n      </CForm>\n\n)}\n\n</Formik>\n\n    )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CRow\n} from '@coreui/react'\nimport RegistrationForm from './components/RegistrationForm'\n\nconst RegisterAdmin = () => {\n  return (\n    <div className=\" c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"6\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                    \n                    <RegistrationForm />\n\n                </CCardBody>\n              </CCard>\n            \n            </CCardGroup>\n          </CCol>\n        </CRow> \n      </CContainer>\n    </div>\n  )\n}\n\nexport default RegisterAdmin\n"],"sourceRoot":""}
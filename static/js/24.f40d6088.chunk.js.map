{"version":3,"sources":["views/dashboard/DashboardChart.js","views/dashboard/Dashboard.js"],"names":["DashboardChart","useState","revenueGenerated","setrevenueGenerated","setRevenueGraphData","response","reOrganizedData","january","february","march","april","may","june","july","august","september","october","november","december","data","map","month","parseInt","profit","useEffect","revenueGraph","then","loadFinancialChart","document","getElementById","height","currentYear","Date","getUTCFullYear","Chart","backgroundColor","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","id","width","WidgetsDropdown","lazy","Dashboard"],"mappings":"0LAIe,SAASA,IAAkB,IAAD,EAEWC,mBAAS,IAFpB,mBAE9BC,EAF8B,KAEZC,EAFY,KAc/BC,EAAsB,SAACC,GAEzB,IAAIC,EAAkB,CAClBC,QAAQ,EACRC,SAAS,EACTC,MAAM,EACNC,MAAM,EACNC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,OAAO,EACPC,UAAU,EACVC,QAAQ,EACRC,SAAS,EACTC,SAAS,GAGbb,EAASc,KAAKC,KAAI,SAACD,GAEf,OAAQA,EAAKE,OAET,IAAK,UACJf,EAAgBC,QAAUD,EAAgBC,QAAUe,SAASH,EAAKI,QACnE,MAEA,IAAK,WACHjB,EAAgBE,SAAWF,EAAgBE,SAAUc,SAASH,EAAKI,QACrE,MAEA,IAAK,QACLjB,EAAgBG,MAAQH,EAAgBG,MAAOa,SAASH,EAAKI,QAC7D,MAEA,IAAK,QACDjB,EAAgBI,MAAQJ,EAAgBI,MAAOY,SAASH,EAAKI,QACjE,MAEA,IAAK,MACLjB,EAAgBK,IAAML,EAAgBK,IAAKW,SAASH,EAAKI,QACzD,MAEA,IAAK,OACLjB,EAAgBM,KAAON,EAAgBM,KAAMU,SAASH,EAAKI,QAC3D,MAGA,IAAK,OACLjB,EAAgBO,KAAOP,EAAgBO,KAAMS,SAASH,EAAKI,QAC3D,MAEA,IAAK,SACLjB,EAAgBQ,OAASR,EAAgBQ,OAAQQ,SAASH,EAAKI,QAC3D,MAEJ,IAAK,YACLjB,EAAgBS,UAAWT,EAAgBS,UAAWO,SAASH,EAAKI,QACpE,MAEA,IAAK,UACLjB,EAAgBU,QAAUV,EAAgBU,QAASM,SAASH,EAAKI,QAC7D,MAEJ,IAAK,WAIL,IAAK,WACLjB,EAAgBW,SAAWX,EAAgBW,SAAUK,SAASH,EAAKI,YAS1EpB,EAAoBG,IAKzBkB,qBAAU,WAKR,OA7FEC,cAAeC,MAAK,SAACrB,GAElBD,EAAoBC,MA2FlB,eAGN,IAGHmB,qBAAU,WAKN,MAJkB,IAAlBtB,GAEDyB,EAAmBzB,GAEX,eAGR,CAACA,IAEJ,IAAMyB,EAAqB,SAACR,GAEdS,SAASC,eAAe,WAC9BC,OAAS,IAChB,IAAIC,GAAc,IAAIC,MAAOC,iBAEjC,IAAIC,IACKN,SAASC,eAAe,WACxB,CAAC,KAAO,MACR,KAAO,CACP,OAAS,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAC/C,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YACpD,SAAW,CAAC,CAAC,MAAQ,sBAAsBE,EAAY,KACvD,KAAO,CAACZ,EAAKZ,QAAQY,EAAKX,SAASW,EAAKV,MAAMU,EAAKT,MACjDS,EAAKR,IAAIQ,EAAKP,KAAKO,EAAKN,KAAKM,EAAKL,OAAOK,EAAKJ,UAC9CI,EAAKH,QAAQG,EAAKF,SAASE,EAAKD,UAClC,MAAO,EACPiB,gBAAiB,CACf,0BACA,0BACA,0BACA,0BACA,2BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEJC,YAAa,CACT,wBACA,wBACA,wBACA,wBACA,yBACA,wBACA,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEFC,YAAa,EACb,YAAc,MACdC,QAAS,CACPC,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,UAWrC,OACI,6BACI,4BAAQC,GAAG,UAAUC,MAAM,MAAMd,OAAO,SCvKpD,IAAMe,EAAkBC,gBAAK,kBAAM,kCAwBpBC,UArBG,WAChB,OACE,oCACE,kBAACF,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KAEE,kBAAC7C,EAAD,OAEF,kBAAC,IAAD","file":"static/js/24.f40d6088.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react'\nimport Chart from 'chart.js'\nimport { revenueGraph } from '../../services/DashboardDetailsService'\n\nexport default function DashboardChart() {\n\n    const [revenueGenerated, setrevenueGenerated] = useState(\"\");\n\n \n    const getFinancialDetailsThisYear = () =>\n    {\n        revenueGraph().then((response)=>\n        {\n           setRevenueGraphData(response);\n        });\n\n    }\n\n    const setRevenueGraphData = (response) =>\n    {\n        let reOrganizedData = {\n            january:0,\n            february:0,\n            march:0,\n            april:0,\n            may:0,\n            june:0,\n            july:0,\n            august:0,\n            september:0,\n            october:0,\n            november:0,\n            december:0\n        }\n\n        response.data.map((data)=>\n        {\n            switch (data.month) {\n\n                case \"January\":\n                 reOrganizedData.january = reOrganizedData.january + parseInt(data.profit);              \n                break;\n\n                case \"February\":\n                  reOrganizedData.february = reOrganizedData.february +parseInt(data.profit)  \n                break;\n                \n                case \"March\":\n                reOrganizedData.march = reOrganizedData.march +parseInt(data.profit)     \n                break;\n\n                case \"April\":\n                    reOrganizedData.april = reOrganizedData.april +parseInt(data.profit)     \n                break;\n                \n                case \"May\":\n                reOrganizedData.may = reOrganizedData.may +parseInt(data.profit)   \n                break;\n                \n                case \"June\":\n                reOrganizedData.june = reOrganizedData.june +parseInt(data.profit)     \n                break;\n\n\n                case \"July\":\n                reOrganizedData.july = reOrganizedData.july +parseInt(data.profit)     \n                break;\n            \n                case \"August\":\n                reOrganizedData.august = reOrganizedData.august +parseInt(data.profit)     \n                    break;\n\n                case \"September\":\n                reOrganizedData.september= reOrganizedData.september +parseInt(data.profit)     \n                break;\n            \n                case \"October\":\n                reOrganizedData.october = reOrganizedData.october +parseInt(data.profit)      \n                    break;\n                \n                case \"November\":\n                reOrganizedData.november = reOrganizedData.november +parseInt(data.profit)         \n                        break;\n\n                case \"December\":\n                reOrganizedData.november = reOrganizedData.november +parseInt(data.profit)         \n                    break;\n\n\n                default:\n                    break;\n            }\n        });\n    \n         setrevenueGenerated(reOrganizedData);\n\n    }\n\n\n    useEffect(() => {\n     \n       getFinancialDetailsThisYear();\n       \n\n      return () => {\n        \n      };\n    }, [])\n\n\n    useEffect(() => {\n     if(revenueGenerated!=\"\")\n     {\n       loadFinancialChart(revenueGenerated);\n     }\n        return () => {\n        \n        }\n    }, [revenueGenerated])\n  \n    const loadFinancialChart = (data) =>\n    {\n        let ctx = document.getElementById(\"myChart\");\n        ctx.height = 100;\n     let currentYear = new Date().getUTCFullYear();\n\n new Chart(\n          document.getElementById(\"myChart\"),\n          {\"type\":\"bar\",\n          \"data\":{\n          \"labels\":[\"January\",\"February\",\"March\",\"April\",\"May\",\n          \"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\n              \"datasets\":[{\"label\":\"Revenue Generated (\"+currentYear+\") \",\n              \"data\":[data.january,data.february,data.march,data.april,\n                data.may,data.june,data.july,data.august,data.september,\n                data.october,data.november,data.december],\n              \"fill\":false,\n              backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)',\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            borderColor: [\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)',\n                'rgba(255, 159, 64, 1)',\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)',\n                'rgba(255, 159, 64, 1)'\n            ],\n              borderWidth: 1,\n              \"lineTension\":0.1}]},\n              options: {\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }]\n                }\n            }\n          }\n          );\n    }\n\n\n  \n    return (\n        <div >\n            <canvas id=\"myChart\" width=\"200\" height=\"200\"></canvas>\n           \n        </div>\n    )\n}\n\n\n\n","import React, { lazy } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CCallout\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport DashboardChart from './DashboardChart.js'\n\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\n\n\nconst Dashboard = () => {\n  return (\n    <>\n      <WidgetsDropdown />\n      <CCard >\n        <CCardBody>\n      \n          <DashboardChart />\n        </CCardBody>\n        <CCardFooter>\n          \n        </CCardFooter>\n      </CCard>\n\n      {/* <WidgetsBrand withCharts/> */}\n\n     \n    </>\n  )\n}\n\nexport default Dashboard\n"],"sourceRoot":""}
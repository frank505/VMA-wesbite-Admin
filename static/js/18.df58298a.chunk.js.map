{"version":3,"sources":["helpers/hooksFormInput.js","helpers/componentHelperFunc.js","store/Actions/PercentageChargeAction.js","services/PercentageChargeService.js","views/view-transaction-charge/components/TransactionForm.js","views/view-transaction-charge/TransactionCharge.js"],"names":["useFormFields","initialState","useState","fields","setValues","event","target","id","value","disableSubmitButton","dataObject","setDisable","objects","test","cleanUpData","abortController","abort","instantiateAbort","AbortController","signal","SwalAlert","title","text","icon","swal","button","getPercentageAction","dispatch","type","RESTART_GET_PERCENTAGE_RESPONSE","GET_PERCENTAGE_LOADING","HttpService","getData","then","data","console","log","catch","error","res","hasOwnProperty","success","GET_PERCENTAGE_SUCCESS","GET_PERCENTAGE_ERROR","GET_PERCENTAGE_CODE_ERROR","updatePercentageAction","credentials","RESTART_UPDATE_PERCENTAGE_RESPONSE","UPDATE_PERCENTAGE_LOADING","postData","JSON","stringify","ChangePercentageChargeService","UPDATE_PERCENTAGE_SUCCESS","UPDATE_PERCENTAGE_ERROR","UPDATE_PERCENTAGE_CODE_ERROR","TransactionForm","disable","useDispatch","getpercentageChargeResponse","useSelector","state","percentageReducer","getPercentageCharge","updatePercentageCharge","abortEffect","event_percentage_charge","handleFieldChange","useEffect","disableButtonIfFieldsAreEmpty","updatePercentageChargeData","e","preventDefault","closeBtnAction","initialValues","validate","errors","message","touched","handleBlur","onSubmit","color","height","width","closeButton","onClick","Object","keys","map","index","key","displayErrorMessages","className","name","onChange","onBlur","placeholder","autoComplete","xs","disabled","TransactionCharge","md"],"mappings":"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","file":"static/js/18.df58298a.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport const  useFormFields = (initialState) => {\n  const [fields, setValues] = useState(initialState);\n\n  return [\n    fields,\n    setValues,\n    function(event) {\n      setValues({\n        ...fields,\n        [event.target.id]: event.target.value\n      });\n    }\n  ];\n}\n\n\n\nexport const disableSubmitButton = (dataObject,setDisable)=>\n   {\n    for(var objects in dataObject)\n    {\n      /**\n       * if  an empty field exist then disable submit button\n       */\n     if(dataObject[objects]==\"\" || dataObject[objects]==null)\n     {\n       \n        return  setDisable(true);\n     }\n     /**\n       * if  an invalid email exists in the form then disable submit button\n       */\n     if(objects==\"email\")\n     {\n         if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(dataObject[objects]))\n         {\n          return  setDisable(true);\n         }\n     }\n\n    }\n   /**\n    * all forms fields have been submited then we return false and set disable property to true\n    */\n     return setDisable(false);\n   }","\nimport swal from 'sweetalert';\n\n\nexport const cleanUpData = (abortController) =>\n{\n    abortController.abort();\n}\n\nexport const instantiateAbort = () =>\n{\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    return abortController;\n}\n\nexport const redirectIfTokenExist = (tokenIdentifier,props) =>\n{\n    let token = localStorage.getItem(tokenIdentifier);\n    if(token !=\"\" && token != null)\n    {\n      props.history.push(\"/user\");\n    }\n}\n\n\nexport const redirectIfTokenExpired = (tokenIdentifier,history) =>\n{\n localStorage.removeItem(tokenIdentifier);\n  history.push(\"/login\");\n}\n\n\n // a little function to help us with reordering the result\n export const reOrder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n \n  console.log(result);\n\n return result;\n\n   };\n\n\nexport const getBase64 =  (file,callback)=> \n{\n   \n  try{\n    const reader = new FileReader();\n\n    reader.addEventListener('load',\n     () => callback(reader.result)\n     );\n\n    reader.readAsDataURL(file);\n  }catch(ex)\n  {\n   console.log(ex)\n  }\n   \n}\n\nexport const SwalAlert = (title,text,icon) =>\n{\nreturn  swal({\n  title: title,\n  text: text,\n  icon: icon,\n  button: true\n})\n\n}\n\n\nexport const tokenExist = (tokenIdentifier) =>\n{\n  let token = localStorage.getItem(tokenIdentifier);\n  if(token == \"\" || token==null)\n  {\n    return false;\n  }\n  return true;\n}\n\n\nexport const convertUrlToBase64String = (imgUrl) =>\n{\n  return new Promise(\n    function(resolve, reject) {\n\n      var img = new Image();\n      img.setAttribute('crossOrigin', 'anonymous');\n      img.src = imgUrl;\n     \n\n      img.onload = function() {\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = img.width;\n        canvas.height = img.height;\n        var ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        var dataURL = canvas.toDataURL();\n        resolve(dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\"));\n      }\n      img.onerror = function() {\n        reject(\"The image could not be loaded.\");\n      }\n\n    });\n}","import { RESTART_GET_PERCENTAGE_RESPONSE, GET_PERCENTAGE_LOADING,\n     GET_PERCENTAGE_SUCCESS, GET_PERCENTAGE_ERROR, GET_PERCENTAGE_CODE_ERROR,\n      RESTART_UPDATE_PERCENTAGE_RESPONSE, UPDATE_PERCENTAGE_LOADING, UPDATE_PERCENTAGE_SUCCESS,\n       UPDATE_PERCENTAGE_ERROR, UPDATE_PERCENTAGE_CODE_ERROR } from \"../ActionTypes/PercentageChargeActionTypes\";\nimport { getCurrentTotalPercentageService, ChangePercentageChargeService } from \"../../services/PercentageChargeService\";\n\n\nexport const getPercentageAction = () =>\n{\nreturn (dispatch)=>{\n\n dispatch({type:RESTART_GET_PERCENTAGE_RESPONSE});\n dispatch({type:GET_PERCENTAGE_LOADING});\n\n  getCurrentTotalPercentageService().then((res)=>{\n\n         console.log(res);\n\n         if(res.hasOwnProperty('success') && res.success==true){\n          dispatch({type:GET_PERCENTAGE_SUCCESS ,res});\n        \n\n         }else if(res.hasOwnProperty('success') && res.success==false) {\n              dispatch({type:GET_PERCENTAGE_ERROR,res});  \n         }\n     },\n     error=>{\n      dispatch({type:GET_PERCENTAGE_CODE_ERROR,error});\n         console.log(error);\n     }\n )\n} \n\n}\n\nexport const clearPercentageMarginProfitState= ()=>\n{\nreturn (dispatch)=>\n{\n dispatch({type:RESTART_GET_PERCENTAGE_RESPONSE});\n}\n}\n\n\nexport const  updatePercentageAction = (credentials) =>\n{\nreturn (dispatch)=>{\n\n dispatch({type:RESTART_UPDATE_PERCENTAGE_RESPONSE});\n dispatch({type:UPDATE_PERCENTAGE_LOADING});\n\n  ChangePercentageChargeService(credentials).then((res)=>{\n\n         console.log(res);\n\n         if(res.hasOwnProperty('success') && res.success==true){\n          dispatch({type:UPDATE_PERCENTAGE_SUCCESS ,res});\n        \n\n         }else if(res.hasOwnProperty('success') && res.success==false) {\n              dispatch({type:UPDATE_PERCENTAGE_ERROR,res});  \n         }\n     },\n     error=>{\n      dispatch({type:UPDATE_PERCENTAGE_CODE_ERROR,error});\n         console.log(error);\n     }\n )\n} \n\n}\n\nexport const clearUpdatePercentageState= ()=>\n{\nreturn (dispatch)=>\n{\n dispatch({type:RESTART_UPDATE_PERCENTAGE_RESPONSE});\n}\n}","import HttpService from './HttpService';\nimport Cookies from 'js-cookie'\n\n///total-revenue-generated/{celebrityId}\nexport const getCurrentTotalPercentageService = () =>\n{\n    const http = new HttpService();\n    \n   let addedUrl = \"admin/get-current-set-percentage-profit\";\n  \n    let tokenId = 'vt-music';\n    return http.getData(addedUrl,tokenId).then((data)=>\n    {\n        console.log(data)\n        return data;\n\n    }).catch((error)=>\n    {\n        console.log(error)\n        return error;\n    });\n} \n  \n\nexport const ChangePercentageChargeService = (credentials) =>\n{\n\n    const http = new HttpService();\n    let addedUrl = \"admin/update-percentage\";\n    let tokenId = 'vt-music';\n    return http.postData(credentials,addedUrl,\"PATCH\",tokenId).then(data=>{\n        console.log(data);\n        console.log(JSON.stringify(data));\n        return data;\n    }).catch((error)=> {console.log(error)\n        return error; \n         });\n }\n\n","import React,{useState,useEffect} from 'react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n  CAlert,\n \n} from '@coreui/react'\nimport { Formik } from 'formik';\nimport {\n    useFormFields,\n    disableSubmitButton\n }  from '../../../helpers/hooksFormInput'\n import {\n     cleanUpData,\n     instantiateAbort\n    } from '../../../helpers/componentHelperFunc'\n\n    import {\n        useDispatch,\n         useSelector\n        } from 'react-redux';\n        \n    import '../styles.css'\n\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner'\nimport { useHistory,useParams } from 'react-router-dom';\nimport { getPercentageAction, \n  updatePercentageAction,\nclearUpdatePercentageState\n} from '../../../store/Actions/PercentageChargeAction';\n\n\nexport default function TransactionForm() {\n\n  \n      const [disable, setDisable] = useState(true);\n\n      const dispatch =  useDispatch();\n    \n      const getpercentageChargeResponse = useSelector(state => state.percentageReducer.getPercentageCharge);\n      \n      const updatePercentageCharge = useSelector(state => state.percentageReducer.updatePercentageCharge);\n\n      const abortEffect = instantiateAbort();\n\n      const [fields,setValues,handleFieldChange] = useFormFields({\n        event_percentage_charge: \"\",\n      \n        }); \n\n        useEffect(() => {\n          dispatch(getPercentageAction());\n          return () => {\n            cleanUpData(instantiateAbort());\n          }\n        }, [])\n\n\n        useEffect(() => {\n          \n         if(getpercentageChargeResponse!=\"\"\n          && getpercentageChargeResponse !=\"loading\"\n          && getpercentageChargeResponse.hasOwnProperty('data')) \n         {\n          setValues({\n            ...fields,\n            event_percentage_charge:getpercentageChargeResponse.data\n          });\n         }\n\n          return () => {\n            \n          }\n        }, [getpercentageChargeResponse])\n\n      \n\nconst validation = () =>\n{\n const errors = {};\n  \nerrors.event_percentage_charge =  !fields.event_percentage_charge? 'Event Percentage Field is Required': '';\n\n\n return errors;\n}\n\n\n\n /**\n   * ensure button remains disable until all form fields are filled\n   */\n  useEffect(() => \n  {\n    disableButtonIfFieldsAreEmpty(fields);\n\n    return function cleanup()\n      {\n        cleanUpData(abortEffect);\n      }\n\n   }, [fields]); \n\nconst updatePercentageChargeData = (e) =>\n{\n  e.preventDefault();\n dispatch(updatePercentageAction(fields))\n}  \n\n\nconst disableButtonIfFieldsAreEmpty = (dataObject)=>\n{\n disableSubmitButton(dataObject,setDisable);\n}\n\n\nconst successMessage = (message) =>\n{\n    console.log(message);\n    return(\n      <CAlert\n      color=\"success\"\n      closeButton\n      onClick={closeBtnAction}\n    >\n     {message}\n    </CAlert>\n  );\n    \n  \n}\n\n \nconst displayErrorMessages = (error,message)=>\n{\n    \n    if(typeof error === \"undefined\")\n    {\n        return(\n            <CAlert\n            color=\"danger\"\n            closeButton\n            onClick={closeBtnAction}\n          >\n           {message}\n          </CAlert>\n        );\n    }\n    \n   return  Object.keys(error).map((keys,index)=>{\n      \n        return(\n            <CAlert\n            color=\"danger\"\n            closeButton\n            onClick={closeBtnAction}\n            key={keys}\n          >\n          {error[keys][0]}\n          </CAlert>\n        );\n     \n      });\n\n}\n\n \n\n\n  const closeBtnAction = () =>\n  {\n      dispatch(clearUpdatePercentageState());\n  }\n\n\n\n\n\n    return (\n        <Formik\n      initialValues={fields}\n      validate={validation}\n    >\n      {({\n        errors,\n        touched,\n        handleBlur,\n        /* and other goodies */\n      }) => (\n\n        <CForm  onSubmit={updatePercentageChargeData}>\n\n       \n    {\n      /**\n       * if the value of the state is loading\n       */\n      updatePercentageCharge!=\"\" && updatePercentageCharge == \"loading\"?\n      <>\n\t<Loader type=\"ThreeDots\" color=\"#321fdb\" height={60} width={60} />\n      </>\n      : \n      /**\n       * if updatePercentageCharge.success is true show success message\n       */\n    updatePercentageCharge!=\"\" && updatePercentageCharge.success==true? \n    successMessage(updatePercentageCharge.message)\n    /**\n     * else if updatePercentageCharge.success == false show error messages\n     */\n       : \n      updatePercentageCharge.success==false ?\n      displayErrorMessages(updatePercentageCharge.error,updatePercentageCharge.message) \n      : updatePercentageCharge\n\n    }\n\n        <h3>Percentage Charge</h3>\n        <p className=\"text-muted\">Edit Percentage Charge</p>\n\n     \n      {\n       getpercentageChargeResponse!='' && getpercentageChargeResponse=='loading'?\n       <Loader type=\"ThreeDots\" color=\"#321fdb\" height={60} width={60} />\n       :\n       <CInputGroup className=\"mb-3\">\n       <CInputGroupPrepend>\n         <CInputGroupText>\n           <CIcon name=\"cil-user\" />\n         </CInputGroupText>\n       </CInputGroupPrepend>\n       <CInput type=\"text\"\n        id=\"event_percentage_charge\"\n        name=\"event_percentage_charge\"\n        value = {fields.event_percentage_charge}\n        onChange={handleFieldChange}\n        onBlur={handleBlur}\n       placeholder=\"Event Percentage Charge\" autoComplete=\"event_percentage_charge\" />\n      \n      <div className=\"error_form_response\">\n       {\n         errors.event_percentage_charge && touched.event_percentage_charge \n         && errors.event_percentage_charge\n       }\n     </div>\n    \n     </CInputGroup>\n      }\n       \n  \n        \n\n        <CRow>\n          <CCol xs=\"6\">\n            <CButton color=\"primary\" \n             disabled={disable}\n            type=\"submit\" className=\"px-4\">Edit</CButton>\n          </CCol>\n         \n        </CRow>\n\n      </CForm>\n\n)}\n\n</Formik>\n\n    )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CRow\n} from '@coreui/react'\nimport TransactionForm from './components/TransactionForm'\n\nconst TransactionCharge = () => {\n  return (\n    <div className=\" c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"6\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                    \n                    <TransactionForm/>\n\n                </CCardBody>\n              </CCard>\n            \n            </CCardGroup>\n          </CCol>\n        </CRow> \n      </CContainer>\n    </div>\n  )\n}\n\nexport default TransactionCharge\n"],"sourceRoot":""}